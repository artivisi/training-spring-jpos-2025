version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: payment-postgres
    environment:
      POSTGRES_DB: payment_system
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./../day-1/data:/docker-entrypoint-initdb.d
      - ./store-forward-schema.sql:/docker-entrypoint-initdb.d/10-store-forward.sql
      - ./../day-4/data/security-schema.sql:/docker-entrypoint-initdb.d/20-security-schema.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - payment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d payment_system"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis for Caching and Session Storage
  redis:
    image: redis:7-alpine
    container_name: payment-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - payment-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Acquirer Service
  acquirer-service:
    build:
      context: ../../
      dockerfile: Dockerfile.acquirer
    container_name: payment-acquirer
    environment:
      SPRING_PROFILES_ACTIVE: production
      SERVER_PORT: 8080
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payment_system
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JMX_ENABLED: true
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
    ports:
      - "8080:8080"
      - "8081:8081"  # JMX Port
    networks:
      - payment-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # JPos Gateway Service
  gateway-service:
    build:
      context: ../../
      dockerfile: Dockerfile.gateway
    container_name: payment-gateway
    environment:
      SPRING_PROFILES_ACTIVE: production
      SERVER_PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payment_system
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JMX_ENABLED: true
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
      # JPos Configuration
      JPOS_CONFIG_DIR: /app/q2
      JPOS_LOG_LEVEL: INFO
    ports:
      - "8081:8081"
      - "8082:8082"  # JMX Port
      - "9010:9010"  # JPos Channel Port
      - "9011:9011"
    networks:
      - payment-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      acquirer-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '0.75'
        reservations:
          memory: 384M
          cpus: '0.375'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Billing Provider Service
  billing-service:
    build:
      context: ../../
      dockerfile: Dockerfile.billing
    container_name: payment-billing
    environment:
      SPRING_PROFILES_ACTIVE: production
      SERVER_PORT: 8082
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: payment_system
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JMX_ENABLED: true
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
    ports:
      - "8082:8082"
      - "8083:8083"  # JMX Port
      - "9020:9020"  # JPos Channel Port
      - "9021:9021"
    networks:
      - payment-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # HSM Simulator Service
  hsm-service:
    build:
      context: ../../
      dockerfile: Dockerfile.hsm
    container_name: payment-hsm
    environment:
      SPRING_PROFILES_ACTIVE: production
      SERVER_PORT: 8083
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JMX_ENABLED: true
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
    ports:
      - "8083:8083"
      - "8084:8084"  # JMX Port
    networks:
      - payment-network
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: payment-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - payment-network
    depends_on:
      - acquirer-service
      - gateway-service
      - billing-service
      - hsm-service
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:9.2.0
    container_name: payment-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-dashboard.json:/etc/grafana/provisioning/dashboards/payment-system.json
      - ./grafana-datasource.yml:/etc/grafana/provisioning/datasources/prometheus.yml
    ports:
      - "3000:3000"
    networks:
      - payment-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.125'

  # AlertManager for Alerting
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: payment-alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - payment-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.125'
        reservations:
          memory: 64M
          cpus: '0.0625'

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.5.0
    container_name: payment-node-exporter
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /:/host:ro,rslave
    ports:
      - "9100:9100"
    networks:
      - payment-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

  # PostgreSQL Exporter for Database Metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.11.1
    container_name: payment-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://postgres:${DB_PASSWORD}@postgres:5432/payment_system?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - payment-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  payment-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16